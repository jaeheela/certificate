# 1. 요구사항 확인
(애자일, LOC기법, V-모형, UML, OMT기법, 클래스 다이어그램, 패키지 다이어그램, 요구 분석 기법, 객체지향 설계 원칙)

# 현행 시스템 분석
01. 현행시스템 파악
- 현행시스템 파악의 개념
- 현행시스템 파악의 목적
- 현행시스템 파악 절차: 구성/기능/인터페이스 파악 > 아키텍쳐/소프트웨어 구성 파악 > 하드웨어/네트워크 구성 파악
- 형해시스템 파악 규칙
02. 소프트웨어 생명주기(SDLC)
- 소프트웨어 생명주기의 개념
- 폭포수 모형: 특징, 개발단계, 문제점
- 프로토타이핑 모형: 개요, 특징, 개발단계, 장단점
- 나선형 모형: 특징, 개발단계
- V-모형: 특징, 장단점
- RAD 모형: 특징, 접근법, 장단점
- 애자일: 정의, 특징(4가지 가치), 종류, 익스트림 프로그래밍
03. 프로젝트 개발비용 산정
- 개발비용 산정: 개념, 개발 비용 산정 시 고려 요소
- 하향식 산정 방법: 특징, 전문가의 감정, 델파이식 산정
- 상향식 산정 방법: 상향식 산정 방법의 특징, LOC기법, 개발 단계별 인월 수 기법
- 수학적 산정 방법: 개념, COCOMO(특징,계층,프로젝트모드), Putnam의 생명주기 예측 모형, FP모형(특징, 기능 증대 요인과 가중치)

# 요구사항 확인
01. 요구분석
- 요구 분석 기법: 개념, 분류(기능요구&비기능요구), 종류
- 요구공학: 개념, 특징, 프로세스(도분명검유), 요구사항 명세기준(요구사항 명세속성&요구사항 명세기법)  
02. 구조적 분석 VS 객체지향 분석
- 구조적 분석: 개요, 특성, 자료흐름도(DFD), 자료사전(DD), 프로세스 명세서
- 객체지향 분석: 개념, 럼바우의 OMT기법, Booch의 OOAD, Coad/Yourdon 방법
03. 분석 모델 확인하기
- 모델링 기법: 개념모델의 역할, 개념모델의 종류와 표기법
- UML: 정의, 기본구성요소, UML 다이어그램의 종류, UML의 특성별 다이어그램(유스케이스, 클래스, 시퀀스, 콜라보레이션, 상태, 활동, 컴포넌트, 패키지)
- 객체지향설계원칙





# 2. 데이터 입출력 구현
(데이터 모델링 절차, 3단계 스키마, 이상 현상, 제2정규형, 반정규화, 함수적 정속)

# 데이터저장소
01. 논리 데이터저장소 설계
- 논리 데이터모델링: 논리 데이터 모델링, 데이터 모델링 절차, 논리 데이터저장소, 논리적 저장구조의 종류(오라클)
- 데이터 모델: 데이터 모델의 개념, 데이터 모델의 구성 요소, 데이터베이스의 논리적 구성, 데이터 모델링
- 개체-관계(E-R) 모델: E-R모델의 개념, 약한개체타입, 속성유형(단순속성과 복합속성, 단일값속성과 다중값속성, 저장속성과 유도속성, 널속성), 확장 E-R모델
- 논리적 데이터 모델: 논리작 데이터 모델의 개념, 논리적 데이터 모델의 종류와 특징
- 관계 데이터 모델: 관계 데이터 구조, 릴레이션의 특성, 키의 종류
- 사상(Mapping)방법: 이진 관계성(1:1,1:다,다:다), 순환 관계성(1:다),삼진 이상의 관계 타입
02. 물리 데이터저장소 설계
- 물리 데이터저장소: 물리 데이터 모델링, 물리 데이터 모델의 변환 순서
- ORM 프레임워크: ORM의 개념, ORM의 장단점, ORM 전환방식, ORM클래스 간의 관계표현, 일반적인 개발과 ORM구축 개발과의 비교
- 3단계 스키마: 스키마의 개념, 외부스키마, 개념스키마, 내부스키마, 3단계 스키마의 사상(Mapping)

# 정규화와 데이터 조작 프로시저
01. 정규화
- 정규화의 개념: 개요, 목적, 이상현상(삽입,삭제,갱신), 정규화에서 스키마 변환 원리, 함수적 종속
- 정규화 체계: 제1정규형, 제2정규형, 제3정규형, 보이스/코드 정규형(BCNF), 제4정규형, 제5정규형
- 반정규화: 정의, 절차, 특징
02. 데이터 조작 프로시저
- 데이터 조작 프로시저 작성: SQL의 개념, PL/SQL, 저장된 프로시저, 트리거
- 데이터 조작 프로시저 최적화: SQL 실행 과정, 옵티마이저와 실행 계획, SQL 소스 코드 인스펜션





# 3. 통합구현
(형상관리, 형상통제, 디자인 패턴, 리팩토링, SOAP/WSDL/UDDI, 형상관리도구)

# 연계 데이터 구성하기 
01. 연계 요구사항 분석
- 통합 구현 : 개념, 송신시스템, 수신시스템, 중계시스템, 연계데이터, 네트워크 
- 연계 요구사항 분석: 개념, 요구사항 분석 시 입력물, 요구사항 분석 시 도구 및 기법, 요구사항 분석 결과물
- 단위모둘 구현: 공통모듈, 단위모듈, 모듈화
02. 연계데이터 식별 및 표준화
- 연계 데이터 식별 및 표준화의 개념
- 연계 범위 및 항목 정의
- 연계 코드 현황 및 매핑
- 연계 데이터 식별자와 변경 구분 추가
- 연계 데이터 표현 방법
- 연계(인터페이스) 정의서 및 명세서

# 연계 매커니즘과 내외부 연계 모듈
01. 연계 매커니즘 구성하기
- 연계 매커니즘
- 직접 연계 방식
- 간접 연계 방식
- 연계 방식 분류(직접연계, 간접연계)
- 연계 매커니즘의 구성: 연계 데이터 생성 및 추출, 코드 매핑 및 데이터 변환, 인터페이스 테이블 또는 파일 생성, 로그 기록, 연계 서버 또는 송신 어댑터, 전송, 연계 서버 또는 수신 어댑터, 운영 DB에 연계 데이터 반영
- 연계 장애 및 오류 처리 구현: 장애 및 오류 유형, 장애 및 오류 처리 방안
- 연계 데이터 보안 적용: 개념, 전송구간보안, 데이터보안, 암호화(대칭키,비대칭키) 
02. 내외부 연계 모듈 구현하기
- ESB방식: ESB, 웹서비스(SOAP/UDDI/WSDL)
03. 통합 개발 환경
- IDE 도구: 개요, 종류
- 협업 도구: 개요, 기능, 종류
04. 형상관리
- 소프트웨어 형상관리: 형상관리의 개념, 형상관리를 위한 조직, 형상관리의 목적
- 형상관리의 기능: 형상식별, 형상통제, 형상감사, 형상보고
- 형상관리도구: 개념, 주요기능, 구성요소, 종류(CVS/SVN/Github)
05. 소프트웨어 재공학
- 소프트웨어 재사용: 개념, 재사용 평가기준, 재사용 접근방안
- 소프트웨어 재공학: 재공학(개요/등장배경/목적), 역공학(개념/관심분야/핵심/프로세스)
06. 디자인 패턴
- 디자인 패턴의 개념
- 디자인 패턴의 특성
- 디자인 패턴의 장점
- 디자인 패턴의 분류와 종류: 생성패턴, 구조패턴, 행위패턴





# 4. 서버 프로그램 구현
(모듈화, 결합도, 응집도, Fan-in, 살충제 패러독스)
# 개발환경 구축하기
01. 개발환경 준비
- 개발환경 구축의 이해
- 개발을 위해 사용되는 소프트웨어 종류와 특성: 구현도구, 빌드도구, 테스트도구, 형상관리도구
- 하드웨어를 고려한 개발 소프트웨어의 산정
02. 개발환경 구축
- 개발환경 구성: 개발 하드웨어환경, 개발 소프트웨어환경
# 공통 모듈 구현하기
01. 공통 모듈 구현
- 모듈화: 개요, 특성, 모듈이 유용한 이유, 좋은 모듈의 기준
- 결합도: 내공외제스자
- 응집도: 우논시절통순기
- 구조적 설계 도구: 구조도, HIPO, N-S Chart, Jackson Diagram
02. 공통 모듈 테스트
- 테스트 케이스: 개념, 구성요소
- 테스트 프로세스: 개념, 단계
# 서버 프로그램과 배치 프로그램 구현하기
01. 업무 프로세스 확인
- 프로세스: 개념, 구성요소
02. 서버 프로그램 구현
- 프레임워크: 소프트웨어 개발 프레임워크의 개념, 프레임워크의 특징, 프레임워크의 종류, 소프트웨어 개발 프레임워크의 적용 효과
- 데이터 저장 계층 또는 영속 계층: 영속계층의 객체 종류(DAO/DTO/VO)
- 소프트웨어 개발 보안: 소프트웨어 개발 보안의 개념, 시큐어 코딩 가이드
- 서버 개발 프레임워크: Spring, Node.js, Django, Codeigniter, Ruby on Rails 
03. 서버 프로그램 테스트
- 소프트웨어 테스트: 개념, 원칙
- 소프트웨어 테스트의 명세: 구분
04. 배치 프로그램 구현하기
- 배치 프로그램: 개념, 필수요소, 수행주기에 따른 구분(이벤트배치, On-Demand배치, 정기배치)
- 배치 스케줄러: 개념, 종류(스프링배치, 쿼츠 스케줄러)





# 5. 인터페이스 구현
(SOAP, JSON, XML, EAI, Ajax)
# 인터페이스 설계 확인
01. 인터페이스 설계서 확인
- 시스템 인터페이스 구성 요소
- 인터페이스 기술 유형
- 인터페이스 설계서
02. 인터페이스 표준 확인
- 기업 내 인터페이스 표준: 기업 내 인터페이스 표준, 애플리케이션 간 인터페이스 원칙, 인터페이스 데이터 구조 표준
- 인터페이스 데이터 표준: 데이터 표준의 개념, 인터페이스 데이터 변환
- 데이터 표준 확인: 인터페이스 데이터 표준, EAI(개념/구성요소/주요기능/구축유형/통합4단계) 
# 인터페이스 기능 구현 및 구현 검증
01. 인터페이스 기능 구현
- 인터페이스 개발환경: 송신프로그램, 중계Agent, 어댑터, 수신프로그램, 인터페이스 데이터 항목 관리
- 인터페이스 기능 구현: 구현방법, JSON, XML, Ajax
- 인터페이스 공통기능 구현: 공통 기능의 구성, 주요 보안 취약점, 시큐어코딩
02. 인터페이스 구현 검증
- 인터페이스 테스트 및 검증 도구: 인터페이스 시뮬레이터, 인터페이스 검증도구
- 인터페이스 테스트 도구: 인터페이스 테스트도구, 테스트 자동화 도구,  테스트 시나리오 및 테스트 케이스, 테스트 데이터





# 6. 화면 설계
(UI, UX, GUI, 사용자 인터페이스 기본 원칙, 사용자 인터페이스의 종류, 기능/비능적 요구사항)
# UI 요구사항 확인
01. UI 요구사항 확인
- 소프트웨어 아키텍쳐: 개념, 활용
- 사용자 인터페이싀(UI): 개념, 종류, 기본원칙, 규칙, 개발 시스템의 기능, UI표준, UI가 필요한 이유, UI의 3가지분야
- UI 요구사항 정의: UI요구사항, 품질요구사항, 품질요구사항 특성
- UI 요구사항 확인: 기능적 요구사항, 비기능적 요구사항
02. UI 프로토타입 제작 및 검토
- UI 프로토타입: 프로토타입의 개념, 프로토타입의 활용
- UI 프로토타입 상세: UI 프로토타입 전략, UI 프로토타입의 장.단점, UI 프로토타입 작성 도구 및 제작 방법, UI 프로토타입 작성 시 고려할 사항, UI 프로토타입 계획 시 고려할 사항
# UI 설계
01. UI 설계
- 사용자 인터페이스의 설계 지침: 사용자중심, 일관성, 단순성, 가시성, 표준화, 접근성, 명확성, 오류의 최소화, 결과 예측 가능
- 사용자 인터페이스 설계 도구: UI 설계 도구의 개념, UI 설계 도구의 종류(와이어프레임, 목업, 스토리보드, 프로토타입, 일반문서툴, 화면디자인UI컨트롤도구)
- UI 흐름 설계: UI설계서 구성에 따른 작성 방법, UI 화면 설계의 기본 구성 요소, 유용성 이해
- 감성 공학: 정의, 기술 활용 분야, 나마가치 마츠오 교수의 감성공학 접근 방법
02. UI 상세 설계
- UI 시나리오의 작성 원칙
- UI 시나리오 문서 작성의 요건 및 효과: UI 시나리오 문서 작성의 요건, 모범적인 UI 시나리오 문서의 효과





# 7. 애플리케이션 테스트 관리
(살충제 패러독스, 테스트 케이스 구성 항목, 단위/통합 테스트, 테스트 오라클, 블랙박스 테스트, 화이트박스 테스트, 인수 테스트, 동등분할, 상향식 통합, 애플리케이션 성능 분석, 리팩토링, 정적분석도구, 소스코드 품질 분석 도구)
# 애플리케이션 테스트 케이스 설계
01. 애플리케이션 테스트
- 애플리케이션 테스트: 개념, 특징, 테스트의 경제성, 테스트의 기본원리
- 테스트 프로세스: 테스트 프로세스, 소프트웨어 테스트 산출물
- 테스트 케이스: 개념, 작성절차, 구성항목
- 테스트의 종류: 단계에 의한 분류(모듈(단위)/통합/인수/시스템), 목적에 의한 분류(기능/성능/스트레스/복잡도), 테스트에 대한 시각에 의한 분류(껌증/확인), 테스트 기법에 의한 분류(블랙박스, 화이트박스), 프로그램 실행 여부에 따른 분류(정적/동적)
- 테스트 레벨: 모듈테스트, 통합테스트, 시스템테스트, 인수테스트
- 테스트 수행: 테스트에 임하는 시각, 원칙, 좋은 테스트 케이스 구비 조건
- 테스트 시나리오: 개념, 작성목적, 작성절차
- 테스트 지식 체계: ISO/IEC 29119의 개요, 구성
- 테스트 오라클: 개념, 특징, 종류
02. 테스트 기법
- 블랙박스 테스트: 정의 및 특징, 블랙박스 테스트에서 찾고자 하는 오류
- 블랙박스 테스트의 기법: 동등(균등/동치)분할, 경계값 분석, 원인-결과 그래프 기법, 오류추측 기법, 비교검사 기법
- 화이트박스 테스트: 정의 및 특징, 화이트박스 이용 범주, 화이트박스 테스트의 수행 절차
- 화이트박스 테스트의 기법: 기초 경로(구조/복잡도) 테스트, 루프테스트, 조건테스트, 데이터흐름 테스트, 화이트박스 테스트 검증 기준
# 애플리케이션 통합 테스트와 성능 개선
01. 애플리케이션 통합 테스트
- 결함 관리 도구: 결합관리, 관리시스템의 종류, 결함관리 상용도구, 결함관리 오픈소스도구
- 테스트 자동화 도구: 자동화된 테스팅의 필요성, 테스트 자동화 도구의 유형, 테스트 자동화 도구
- 통합 테스트: 통합 테스트의 개념, 빅뱅 통합, 하향식 통합(특징,순서,장단점), 상향식 통합(특징,순서,장단점), 연쇄식 텅힙(특징,기법) 
02. 애플리케이션 성능 개선
- 애플리케이션 성능 분석: 애플리케이션의 성능을 측정하기 위한 지표, 유형별 성능 분석 도구, 애플리케이션 성능 저하 원인 분석, 애플리케이션 성능 분석 절차
- 애플리케이션 성능 개선: 소스 코드 최적화(개념,규칙), 코드 리팩토링(정의,목적,시기,대상,프로세스,기법), 소스코드 품질분석도구(개념,정적분석도구,동적분석도구) 





# 8. SQL 응용
(DDL, DML, DCL, 트랜잭션의 성질, COMMIT, ROLLBACK, 회복, 연산자, 병행제어, 데이터 마이닝
# SQL기본
- SQL의 개요: SQL(개념,특징,종류)
- DDL(데이터 정의어): 특징, 유형(CREATE문, ALTER문)
- DML(데이터 조작어): 특징, 유형(SELECT문, INSERT문, UPDATE문, DELETE문)
- DCL(데이터 제어어): GRANT(권한부여), REVOKE(권한회수)
# SQL응용
01. SQL응용
- 뷰(VIEW): 개념, 특징, 장단점, 생성, 삭제및변경
- 내장SQL : 개념, 특징, 커서
02. 트랜잭션과 회복
- 트랜잭션: 개념, 성질(원일격영), 상태(활동-부분완료-장애-철회-완료)
- 회복: 개념, 장애의유형, 회복의 기본원리, 회복연산자, 미디어 장애시 회복기법, 시스템 고장 시 회복기법
- 병행제어: 필요성, 병행제어를 안할 시 문제점(갱신분실/모순성/연쇄복귀), 주요 병행제어 방법(기본로킹방법/확장된로킹방법/2단계로킹규약)
03. 트리거
- 트리거: 개념, 구성요소, 타입
04. 인덱스
- 인덱스: 단일 단계 인덱스의 개요, 인덱스의 종류(기본/클러스터링/보조/희소/밀집), 다단계 인덱스
- CRUD분석: 개념
- ETL: 개념
- 질의어 처리 단계: 질의어 처리 단계 설명, 질의어 최적화
- 데이터 웨어하우스와 OLAP: 데이터 웨어하우스(개요/특징/구축단계), OLAP(개념/특징)
05. 데이터 마이닝
- 데이터 마이닝: 정의, 종류, 연관규칙
06. DB 관련 용어




  
# 9. 소프트웨어 개발 보안 구축
(정보보호의 목표, AAA, RTO, DAC, DES/AES, IPSec, 블록체인, OSPF, MD5, LAND공격, 세션 하이재킹, 유닉스 시스템, 네트워크 해킹 유형, SQL삽입공격, OSI 7계층 참조모델, TKIP, 라우팅 프로토콜, 가상 사설망
# 정보보호
01. 정보보호의 개념
- 정보보호의 정의
- 정보보호의 목표: 목표(기무가), 추가적보안요소
- 정보보호의 주요개념: 자산, 위협, 취약성, 영향, 보호대책, 정보보호 목쵸 사항을 위협하는 공격 유형
- 업무 연속성 관리: 업무 연속성 관리의 이해, DRP(재난복구계획), BCP(업무연속성계획)
02. 접근 통제
- 접근 통제의 개요
- 식별과 인증
- 개체 인증: 개념, 패스워드방식, OTP(개요/동기화방식의OTP/비동기화방식의OTP)
- 생체인식 기술: 개념, 생체인식에 이용될 수 있는 이상적인 생체 특징
- 접근 통제정책: 개요, 임의적접근통제(DAC), 강제적접근통제(MAC), 역할기반접근통제(RBAC)
- 접근 통제보안 모델: 벨 라파듈라 모델, 비바 모델, 클락-윌슨 모델
# 기술적보안
01. 암호화
- 암호화의 정의
- 암호의 역사: 개요, 고대암호, 근대암호, 현대암호
- 암호 이용의 목적: 기밀성, 무결성, 인증, 부인 방지
- 대칭키(비밀키) 암호방식: 개요, DES, 트리플DES, AES, 기타 대칭키 암호들(SEED, ARIA, IDEA, Blowfish,  RC5&RC6, HIGHT
- 비대칭키(공개키) 암호방식
- 해시함수: 특성, 해시함수의 대표적인 알고리즘 종류
02. 네트워크 보안
- OSI 7계층 참조 모델: 정의, 목적, 기본요소, 각 층의 의미와 역할
- TCP/IP프로토콜: 네트워크 인터페이스 계층, 인터넷 계층, 전송계층, 응용계층
- 암호화 프로토콜: 개념, 데이터링크 계층의 암호화 프로토콜, 네트워크 계층의 암호화 프로토콜(IPSec), 전송 계층의 암호화 프로토콜
- 네트워크 기반 명령어: Ping, Traceroute, Netstat, TCPDUMP
- 라우팅 프로토콜: 라우팅의 목표, 가장 좋은 경로, 라우팅 프로토콜, 내부 라우팅과 외부 라우팅으로의 분류(RIP,OSPF,BGP)
- 포트 스캐닝: 개념, 공격유형(TCP Connect Scan, TCP Half-Open Scan, Stealth Scan, UDP Scan)
- 네트워크 해킹 유형: DoS 공격(Ping of Death 공격, TearDrop 공격, SYN Flooding 공격, Land 공격, Smurf 공격, DDos 공격), 스니핑, 스푸핑, 세션 하이재킹, 랜섬웨어
- 해킹기술: 피싱, 파밍, 스니핑, 백도어
- 네트워크 보안 장비: 방화벽(스크리닝 라우터, 배스천 호스트, 단일 홈드 게이트웨이, 듀얼 홈드 게이트웨이, 스크린드 호스트 게이트웨이, 스크린드 서브넷 게이트웨이), IDS, IPS, 가상사설망(VPN)
- 네트워크 보안 솔루션: NAC, ESM, UTM, SIEM
03. 시스템 보안
- 운영체제(OS): 목적, 기능, 구조
- 시스템 보안: 시스템과 관련한 보안 기능, 계정과 패스워드 관리, 운영체제 보안 강화 방향, 운영체제 보안의 주요 제공 기능
- 보안 운영체제(Secure OS): 개요, 보안운영체제 시스템 설계 원리, 보안 운영체제의 보안 기능, 커널 설계, 참조 모니터, 신뢰 컴퓨팅 베이스, 시스템 감사
- 유닉스 시스템: 유닉스 시스템 개요, 유닉스 운영체제 종류, 유닉스의 특징, 유닉스 시스템의 핵심구조(커널,쉘,파일시스템), 유닉스 시스템의 로그 관리(주요 로그 파일, 시스템 위험성에 따른 syslog 단계 유형), 유닉스 시스템 계정 보안(패스워드, 유닉스 시스템 계쩡 설정과 관련된 파일)
04. 웹보안
- 웹 프로토콜: HTTP
- 웹 취약성 공격: XSS, SQL삽입공격, 크로스 사이트 요청 변조, LDAP 삽입, XML 삽입
- 웹 보안 프로토콜: SSL, S-HTTP




# 10. 프로그래밍 언어 활용
(헝기리안 표기법, 연산자, 제어구조, 배열과 포인터, 제어문, 배열, 상속, 생성자, 오버라이딩, AML, Ajax, WSDL)
# 프로그래밍 언어
01. 프로그래밍 언어
- 프로그래밍 언어의 개요: 프로그래밍 언어의 개념, 프로그래밍 언어의 정의
- 프로그래밍 언어의 분류: 사용목적에 의한 분류, 저급언어와 고급언어
- 프로그래밍 언어의 역사: 제1세대 언어, 제2세대 언어, 제3세대 언어, 제4세대 언어
- 프로그래밍 언어에서의 추상화: 추상화의 개념, 추상화의 범주, 자료 추상화, 제어 추상화
02. 구조적 프로그래밍과 객체지향 프로그래밍
- 구조적 프로그래밍: 개념, 특징, 논리 구조, 구조적 설계의 효과
- 객체지향 프로그래밍: 객체지향의 개요, 객체지향의 기본개념
# C 언어
01. C언어
- C언어의 개요: C언어의 역사, C언어의 특징, 기본구조, 전처리문, C언어 표준 라이브러리
- C언어의 구성 요소: 예약어, 명칭, 자료표현, 자료형, Escape Sequence, 구분기호
- C언어의 필수 요소: 변수, 상수, 배정문
- C언어의 연산자: 연산자의 종류, 연산자의 결합방향과 우선순위, 산술연산 시 자료형 변환
- 제어구조: if~else, switch~case, for문, while문, do~while문, break문/continue문
- 배열과 포인터: 배열, 포인터, 포인터과 문자열, 포인터 연산, 배열과 포인터, 이중포인터
- 구조체와 공용체: 구조체, 공용체
- 열거형과 typedef문: 열거형, typedef
- 함수: 개념, 특징, 표준함수, 사용자 정의 함수
- 기억 부류: 종류, auto, register, static, extern
# Java 언어와 Python 언어
01. 자바 언어
- 자바(JAVA)의 개요: 자바의 유래, 자바의 특징
- 자바의 기본구조: 자바 프로그램 분석(클래스/메인메소드/표준입출력/주석문), 자바의 기본구조, 자바의 제어문
- 클래스의 구조: 접근자와 옵션, 객체의 선언과 생성
- 멤버변수: 멤버변수의 분류
- 메소드: 메소드의 분류, 인수 전달 방식, 메소드 오버로딩
- 생성자: 생성자의 개요, 생성자 오버로딩, this 예약어
- 상속: 확장 클래스의 계층과 상속, 메소드 오버라이딩, super예약어, 추상클래스와 추상메소드
- 인터페이스: 개요, 정의
02. Python 언어
- Python 언어: 개요, Python 특징
- 기본구조: 연산자, 문자열, list, 숫자의 시퀀스, 딕셔너리, 튜플, Function함수, Lambda, Class, 모듈, 입력/출력 함수
- 제어구조: if문, for문, while문
- 예외처리
- 주석 
# 웹 저작 언어
01. 웹 저작 언어
- HTML: HTML의 개요, Tag의 종류
- JavaScript
- ASP
- JSP
- PHP
- Ajax





# 11. 응용 SW 기초 기술 활용
(프로세스 상태도, HRN, 유닉스 시스템, SJF기법, RR기법, SRT기법, 하둡, 스키마, 관계 데이터 구조, 크로스 조인, 디비전, 데이터 모델의 구성요소, 데이터 모델, 개체-관계 모델, 
키의 종류, 관계 데이터 연산, 애드훅 네트워크, 가상 회선 방식, 데이터그램 방식, RARP/ICMP, 프로토콜, IPv4/IPv6, NAT, OSI계층, 서브 네트워크) 
# 운영체제 기초 활용
01. 운영체제
- 운영체제: 정의, 역할, 구성, 역사, 5계층구조
- 운영체제의 분류: 단일프로그래밍 시스템, 다중프로그래밍 시스템, 다중처리 시스템, 일괄처리 시스템, 시분할 시스템, 분산처리 시스템, 실시간처리 시스템 
- 버퍼링과 스풀링: 버퍼링, 스풀링
- 프로세스: 정의, 상태도, 스레드, 병행프로세스, 프로세스 스케줄링 방법에 따른 분류
- 교착상태: 교착상태 개요, 교착상태 4대 발생 조건, 교착상태 발견, 교착상태 회복, 교착상태 예방, 교착상태 회피
- 메모리 관리: 기억장치 배치전략(First Fit/Best Fit/Worst Fit), 기억장치 교체전략(FIFO/LRU/OPT/LFU/NUR/SCR/무작위 페이지 교체/MFU), 가상기억장치(페이징기법/세그먼테이션기법/페이지부재/스래싱/지역성)
- 디스크 스케줄링: FCFS, SSTF, SCAN, LOOK, C-SCAN, C-LOOK, N-step SCAN, SLTF, Eschenbach 
02. 유닉스(Unix) 
- 유닉스 시스템: 유닉스 시스템 개요, 유닉스의 특징
- 유닉스 시스템 핵심구조: 유닉스 시스템의 3가지 핵심구조(커널/쉘/파일시스템/아이노드/유닉스 명령어 정리/유닉스 시스템의 주요 로그 파일/시스템 위험성에 따른 syslog 단계 유형)
# 데이터베이스 기초 활용
01. 데이터베이스
- 정보처리 시스템: 데이터, 정보, 정보시스템
- 데이터베이스의 개념: 정의, 특징, 논리적 구성(개체/속성/관계), 구조(논리적구조/물리적구조)
- 데이터베이스 관리 시스템(DBMS): 파일시스템의 문제점, DBMS의 정의, DBMS의 필수기능, DBMS의 장단점, DBMS의 구성요소
- 데이터베이스 시스템(DMS)의 구성: 3단계 데이터베이스(스키마), 데이터 언어의 구분, 데이터베이스 관리자, 데이터사전, 관계 데이터베이스에서 데이터사전의 특징, 데이터 사전의 저장 내용, 데이터 디렉토리
02. 데이터모델링
- 데이터모델(Data Model)의 개념
- 논리적 데이터 모델의 종류: 관계 데이터모델, 네트워크 데이터모델, 계층 데이터모델
- 개체와 관계: 개체, 관계(사상의 원소 수/관계의 구분)
- 개체-관계 모델(E-R Model): 사상방법
- 속성유형: 단순속성과 복합속성, 단일값 속성과 다중값 속성, 저장속성과 유도속성, 널애트리뷰트 속성
03. 관계 데이터 모델의 구조 및 제약
- 관계 데이터 모델의 구조 및 제약: 관계데이터구조(릴레이션, 릴레이션의 특성, 키의종류, 데이터 무결성 제약조건
- 관계 데이터 연산: 관계대수, 관계해석
04. 데이터베이스 설계와 데이터 웨어하우스
- 데이터베이스 설계: 개요, 요구조건분석, 개념적설계, 논리적설계, 물리적설계
- 데이터 웨어하우스: 개요, 특징, 구축단계
- OLAP: 개요, 특징
- 데이터마이닝: 개요, 종류, 연관규칙  
# 네트워크 기초 활용
01. 데이터 통신
- 데이터 통신: 통신, 데이터통신, 데이터통신 시스템의 주요특징, 정보통신 기술의 발전
- 데이터 통신망: 개요, 장점, 구조화 기법에 따른 분류, 네트워크 구성형태(성형/버스형/링형/트리형/망형)
02. 프로토콜
- 프로토콜의 개념
- 프로토콜의 구성요소: 구문, 의미, 타이밍
- 프로토콜의 기능: 단편화와 재결합, 정보의 캡슐화, 오류 제어, 순서 지정, 흐름제어, 연결제어, 주소지정, 다중화 및 역다중화
- 전송 방식
- 프로토콜 제정 관련 표준화 기구: ITU-T, ISO, ANSI, EIA, IEEE
- OSI계층 참조 모델: 정의, 목적, 기본요소(개방형시스템, 응용실체/개체, 접속, 물리매체), 원리, 주요기능, OSI 각 계층의 기능을 수행하는 장비(라우터, 스위치, 브리지, 허브, 리피터, 게이트웨이), 흐름제어, 오류제어, 오류검출방식
- TCP/IP 프로토콜: 개요, 네트워크 인터페이스 계층, 인터넷 계층, 전송 계층, 응용 계층
03. 인터넷
- 인터넷의 정의
- 인터넷의 특징: 실시간,양방향의 멀티미디어 네트워크, 개방적 네트워크, 소유자나 운영자가 없는 무정부 네트워크, 대중적인 네트워크, 용도가 무한한 가능성의 네트워크
- IP 주소체계:  IP주소, IP주소클래스
- 도메인 이름
- DNS
- URL
- 서브 네트워크
- IPv6: IPv4의 문제점, IPv6의 등장, IPv6의 특징, IPv6주소 표기법





# 12. 제품 소프트웨어 패키징
# 제품 소프트웨어 패키징
01. 애플리케이션 패키징
- 애플리케이션 패키징: 패키징
- 릴리즈 노트: 릴리즈 노트의 개념, 릴리즈 노트의 중요성, 릴리즈 노틍 작성 시 고려사항
- 애플리케이션 배포 도구: 구성요소(암호화, 인증, 키관리, 저작권표현, 크랙방지)
- 애플리케이션 모니터링 도구: 개요, 종류(변경영향관리, 성능관리, 동적분석, 정적분석)
02. 저작권 관리
- 제품 소프트웨어 저작권 보호의 이해와 필요성: 저작권의 이해, 저작권 보호기술의 개념, 저작권 보호기술의 필요성
- DRM: 개요, DRM 시스템 구성 요소
# 제품 소프트웨어 메뉴얼 작성 및 버전 관리
01. 제품 소프트웨어 메뉴얼 작성                                                                                                                                                         ㄴㄴd
- 제품 소프트웨어 메뉴얼 작성: 개요, 설치 메뉴얼 작성의 기본 사항, 사용자 메뉴얼  
- 국제 표준 제품 품질 특성: ISO, ISO 9000, ISO/IEC, CMM, SPICE, CMMI
02. 제품 소프트웨어 버전 관리
- 제품 소프트웨어 패키징의 형상 관리: 제품 소프트웨어 형상 관리 파악, 제품 소프트웨어 형상 관리 중요성, 제품 소프트웨어 형상 관리 역할
- 소프트웨어 버전 관리 도구: 버전 관리의 필요성, 버전 관리 용어, 버전 프로그램 종류
- 빌드 자동화 도구: 빌드 자동화 도구의 개요, 빌드 도구의 기능, 빌드 자동화 도구 틀
 
 
 
 
 