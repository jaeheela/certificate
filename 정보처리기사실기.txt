정처기 실기 기출

# 1. 요구사항 확인 
- 디자인 패턴 : 모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제를 의미
    - 생성 (추빌팩프싱) : 객체 생성법
        - 추 Abstract Factory : 
        - 빌 Builder : 
        - 팩 Factory Method : 객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화, 상위 클래스에서 인터페이스만 정의하고 실제 생성은 서브 클래스가 담당, 다른 이름으로 가상 생성자 패턴으로 불림
        - 프 Prototype : 
        - 싱 Singleton : 
    - 구조 (어브컴데퍼플프) : 복잡한 시스템을 개발하기 쉽도록 클래스나 객체들을 조합하는 패턴
        - 어 Adaptor : 
        - 브 Bridge : 구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 패턴으로, 기능과 구현을 두 개의 별도 클래스로 구현함
        - 컴 Composite : 
        - 데 Decorator : 
        - 퍼 Facade : 
        - 플 Flyweight : 
        - 프 Proxy : 대리자라는 이름으로 불림, 내부에서는 객체 간의 복잡한 관계를 단순하게 정리해주고, 외부에서는 객체의 새부적인 내용을 숨기는 역할을 함
    - 행위: 
    - 클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴
        - 책임 연쇄 Chain of Responsibility : 
        - Template Method : 
        - 중 Mediator : 
        - 메 Memento :
        - 스 Strategy : 
        - 인 Interpreter :
        - 커 Command :
        - 반 Iterator :
        - 옵 Observer : 한 객체의 상태가 바뀌면 그 객체에 의존하는(상속된) 다른 객체들에게 연락이 가서 자동으로 내용이 갱신되는 방식, 일대다의 의존성을 정의하는 패턴, 상호 작용하는 하는 객체 사이에는 가능하면 느슨하게 결합하는 패턴, 주로 분산된 시스템 간에 이벤트를 생성 발생(Publish) 하고, 이를 수신(Subscribe)해야 할 때 이용함
- 객체지향 설계 원칙
    - SRP(single responsibility) 단일 책임 원칙
    - OCP(open-closed) 개방-폐쇄 원칙
    - LSP (liskov substitution) 리스코프 치환 원칙
    - ISP (interface segregation) 인터페이스 분리 원칙
        - 자신이 사용하지 않는 인터페이스의 의존 관계를 맺거나 영향을 받지 않아야 한다는 객체 지향 설계 원칙 중 하나
        - ex.  프린터,  팩스, 복사 기능을 가진 복합기의 경우 3가지 기능을 모두 가진 범용 인터페이스보다는 프린터 인터페이스, 팩스 인터페이스, 복사 인터페이스로 분리함으로써 하나의 기능 변경으로 인해 다른 기능이 영향을 받지 않도록 해야 함
    - DIP (dependency inversion) 의존역전 원칙
- 럼바우 데이터 모델링
    - 객 Information 모델링 : 시스템에서 요구되는 객체를 찾아내어 속성과 연산 식별 및 객체들 간의 관계를 규정하여 표시하는 모델링 ex. ER 다이어그램
    - 동 Dynamic 모델링 : 시간의 흐름에 따른 객체들 간의 제어흐름, 상호작용, 동작순서 등의 동적인 행위를 표현하는 모델링 ex. 상태흐름도(STD), 시간 추적도
    - 기 Function 모델링 : 다수의 프로세스들 간의 쟈료 흐름을 중심으로 처리 과정을 표현한 모델링 ex. 자료흐름도(DFD)
- 요구사항
    - 기능 요구사항 : 시스템이 무엇을 하는지, 어떠한 기능을 수행하는지 등 사용자가 시스템을 통해 제공받기를 원하는 기능이나 시스템이 반드시 수행해야 하는 기능
    - 비기능 요구사항: 품질이나 제약사항과 관련된 요구사항으로, 시스템의 장비 구성, 성능, 인터페이스, 테스트, 보안 등의 요구사항
- 소프트웨어 형상 통제 : 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선이 잘 반영될 수 있도록 조절하는 작업
- 소프트웨어 형상 관리 : 소프트웨어 개발 단계의 각 과정에서의 만들어지는 프로그램, 프로그램을 설명하는 문서, 데이터 등을 관리하는 것, 소프트웨어의 개발 과정에서의 만들어지는 여러 버전들의 변경 사항을 관리하는 일련의 활동이며 이를 지원하는 도구로 Git, SVN,CVS 등 있음
- LOC 기법
    - 예측된 총 라인 수: 30,000라인 
    - 개발에 참여할 프로그래머 : 5명
    - 프로그래머들의 평균 생산성 : 월간 300라인
    - 개발에 소요되는 시간 : 개발시간 = 노력인원 / 투입인원 , 노력인원 = 총 라인수/1인당 월평균 생산코드
        - 개발에 소요되는 시간 = (30,000/300)/5 = 20
- 애자일: 시제품을 끊임없이 제작하며 사이클을 반복하는 개발 방법론, 워터폴과 대조적이며 소프트웨어 개발을 넘어 기업 경영 전반에서 사용됨, 고객의 변화하는 요구사항과 환경 변화에 능동적인 소프트웨어 개발 방법론




# 2. 데이터 입출력 구현
- 데이터베이스 구축까지의 과정 : 요개논물구
    - 요구 분석 >. 개념적 설계 > 논리적 설계 > 물리적 설계 > 구현
- 데이터베이스 설계
    - 개념적 설계 : 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정으로, 개념 스키마 트랜잭션 모델링을 수행하며, 요구 조건 명세를 E-R 다이어그램으로 작성함
    - 논리적 설계 : 현실의 자료를 특정 DBMS가 지원하는 자료구조로 변환하는 과정으로, 트랜잭션의 인터페이스를 설계하고, 정규화를 통해 스키마를 평가 및 정제함
    - 물리적 설계 : 논리적 구조로 표현된 데이터를 디스크 등의 저장장치에 저장할 수 있는 데이터로 변환하는 과정으로, 파일의 저장 구조 및 액세스 경로를 결정하며, 테이블 정의서 및 명세서가 산출됨
- 스키마
    - 개념스키마 : DB의 전체적인 논리적인 구조로, 모든 응용 프로그램이나 사용자들이 필요로 하는 데이터를 종합한 조직 전체의 데이터베이스
    - 외부스키마 : 사용자나 응용 프로그래머가 각 개인의 입장에서 필요로 하는 데이터베이스의 논리적 구조로 정의한 것
    - 내부스키마 : 실제로 저장될 레코드의 형식, 저장 데이터 항목의 표현 방법, 내부 레코드의 물리적 순서 등을 나타냄

- E-R 다이어그램
    - 마름모 : 관계집합
        - 네모 : 관계집합의 속성
        - 점선 : 관계집합과 속성의 연결
    - 직사각형 : 개체집합
        - 밑줄 : 키
        - 실선 : 개체집합과 관계집합의 연결
- 데이터 모델의 구성 요소
    - 연산 : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구에 해당
    - 구조 : 논리적으로 표현된 객체 타입들 간의 관계로서 데이터의 속성 및 정적 성질을 표현함
    - 제약조건 : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약조건
- 정규화 : 테이블을 만들 때 이상을 방지하기 위해 데이터들의 중복성 및 종속성을 배제하는 정규화를 수행함
    - 도 : 원자값 아닌 도메인 분해
    - 부 : 부분 함수적 종속 제거(Partial Functional 제거)
        - 제2정규형
        - 테이블 <R>에서 ‘성적’은 기본키인 {학생, 학과}에 대해 Full Functional Dependency
        - 테이블 <R>에서 ‘학년’은 기본키인 {학생, 학과} 중 ‘학생’만으로 식별이 가능하므로 기본키에 대해 Partial Functional Dependency
    - 이 : 이행함수종속 제거 (Transitive Functional 제거)
        - 임의의 테이블에 속성 A,B,C가 있을 때 A->B이고, B->C일 때 A->C인 관계는 Transitive Functional Dependency
    - 결 : 결정자가 후보키가 아닌 것 제거 : 보이스-코드(BCNF) 정규화
    - 다 : 다치종속 제거
    - 조 : 조인종속 제거
- 반(비)정규화 : 시스템의 성능을 향상시키고 개발 및 운영의 편의성 등을 높이기 위해 정규화된 데이터 모델을 통합, 중복, 분리하여 의도적으로 정규화 원칙을 위배하는 행위
- 관계대수와 관계해석 : 관계대수로 표현한 식은 관계해석으로 표현 가능
    - 관계해석(Relational Calculus)
        - 관계 데이터의 연산을 표현하는 방법으로, 관계 데이터 모델의 제안자인 코드가 수학의 술어 해석(Predicate Calculus)에 기반을 두고 관계 데이터베이스를 위해 제안함
        - 원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성을 지니며, 원하는 정보를 정의할 때 계산 수식을 사용함
        - 튜플 해석식을 사용하는 튜플 관계해석과 해석식을 사용하는 도메인 관계해석으로 구분됨
    - 관계대수
        - 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적 언어
        - 순수관계연산자
            - σ (Selection) :  수평 연산 ex. <성적> 릴레이션에서 평균이 90점 이상인 튜플 검색 : σ 평균>= 90 (성적)
            - π (Projection) : 수직 연산 , 주어진 릴레이션에서 속성 리스트에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산 ex. <성적> 릴레이션에서 ‘이름’과 ‘평균’ 속성 추출 : π 이름, 평균 (성적)
            - ⋈ (Join) : 조인 연산 , 공통 속성을 중심으로 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산 ex. <성적> 릴레이션과 <학적부> 릴레이션을 ‘No’ 속성을 기준으로 합침 : 성적⋈ No=No 학적부
            - ÷ (Division) : 릴레이션 A,B가 있을 때 릴레이션 B의 조건에 맞는 것들만 릴레이션 A에서 분리하여 프로젝션을 하는 연산,  “한 테이블”에서 “다른 테이블”의 모든 값을 가지고 있는 행들을 찾아주는 연산자
        - 일반집합연산자
            - ∪ (Union 합집합 ) : 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 결과로 생성된 릴레이션에서 중복되는 튜플은 제거되는 연산
            - ∩ (Intersaction 교집합)
            - - (Difference 차집합) : 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산
            - x (Catersian Product 교차곱) : 두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산
- LOD(Linked Open Data 개방형 링크드 데이터) : 웹 상에 존재하는 데이터를 개별로 식별하고, 각URI 링크 정보를 부여함으로써 상호 연결된 웹을 지향하는 모형, 링크 기능이 강조된 시맨틱웹의 모형에 속한다고 볼 수 있음, 팀버너스 리의 W3C를 중심으로 발전함, Linked Data와 Open Data를 결합한 용어
    - 주요기능 : 공개된 데이터를 이용하면 내가 원하는 데이터가 이미 존재하는지, 어디에 존재하는지 알 수 있음, URI로 구별되는 데이터 리소스의 자유로운 접근 및 이용이 가능하므로 큰 노력 없이 데이터의 매쉬업 가능, 내가 만든 데이터가 아니더라도 URI를 이용해 링크만 해주면 이용 가능
    - 4대원칙: 통합 지원 식별자(URI)를 사용함, URI는 HTTP 프로토콜을 통해 접근할 수 있어야 함, RDF나 스파클 같은 표준을 사용함, 풍부한 링크 정보가 있어야 함




# 3. 통합구현
- WDSL : 웹서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어로, XML로 작성되며 UDDI의 기초가 됨. SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용되며, 클라리언트는 WDSL을 통해 서버에서 어떠한. 조작이 가능한지를 파악할 수 있음
- IPC (Inter-Process Communication) : 모듈 간 통신을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합, 복수의 프로세스를 수행하며 이뤄지는 프로세스 간 통신까지 구현 가능, 대표적인 메소드에는 공유 메모리(Shared Memory), 소켓(Socket) , 세마포어(Semaphores), 파이프와 네임드 파이프(Pipes&named Pipes), 메시지 큐잉(Message Queueing)이 있음
- EAI(Enterprise Application Integration)
    - 기업 내 각종 애플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션으로, 비즈니스 간 통합 및 연계성을 증대시켜 효율성 및 각 시스템 간의 확정성을 높여줌
    - EAI 구축유형
        - Point-to-Point : 가장 기본적인 애플리케이션 통합 방식, 애플리케이션을 1:1로 연결함, 변경 및 재사용이 어려움
        - Hub&Spoke : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식, 확장 및 유지보수성가 용이, 허브 장애 발생 시 시스템 전체에 영향 미침
        - Message Bus : 애플리케이션 사이에 미들웨어를 두어 처리하는 방식, 확장성이 뛰어나며 대용량 처리 가능
        -  Hybrid : 그룹 내에서는 Hub&Spoke 방식을, 그룹간에는 Message Bus 방식을 사용함, 필요한 경우 한가지 방식으로 EAI 구현 가능, 데이터 병목 현상을 최소화할 수 있음



# 4. 서버 프로그램 구현
- 결합도 : 내공외제스자
    - 내용결합도 : 모듈 간의 인터페이스로 데이터, 지역변수 등을 직접 참조하거나 수정할 때의 결합도
    - 공통결합도 : 모듈 간의 인터페이스로 파라미터가 아닌 모듈 밖에 선언된 전역 변수를 사용해 전역 변수를 갱신하는 방식으로 상호작용하는 때의 결합도
    - 외
    - 제어결합도(Control Coupling) : 단순 처리 대상인 데이터만 전달되는 것이 아니라 어떻게 처리해야 하는지를 결정하는 제어 요소가 전달되는 경우의 결합도
    - 스탬프결합도 : 모듈 간의 인터페이스로 배열이나 레코드 등의 자료구조가 전달될 때의 결합도
    - 자
- 응집도 : 우논시절통(교)순기
    - 우
    - 논
    - 시
    - 절치적 응집도: 내부 요소들이 기능적으로 연관성은 없으나, 순차적으로 실행될 때의 응집도
    - 교환적 응집도: 서로 다른 기능을 수행하지만 동일한 입력과 출력을 사용할 때의 응집도
    - 순
    - 기능적 응집도: 하나의 기능에 밀접하게 관련되어 있거나 연관되었을 때의 응집도 

- 팬인 : 나를 기준으로 들어온거
- 팬아웃 : 나를 기준으로 나간거


# 5. 인터페이스 구현
- Junit : 자바 프로그래밍 언어용 유닛 테스트 프레임워크, xUnit 계열의 한 종류, 같은 테스트 코드를 여러번 작성하지 않게 도와주며 테스트마다 예상 결과를 기억할 필요가 없는 자동화된 해법을 제공하는 특징이 있음
- XML 
    - 웹 페이지의 기본 형식인 HTML의 문법이 각 웹 브라우저에서 상호 호환적이지 못하다는 문제와 SGML의 복잡함을 해결하기 위하여 개발됨, 다른 특수한 목적을 갖는 마크업 언어
    - 원할한 데이터의 연계를 위해 송수신 시스템 간에 전송되는 데이터가 동일한 구조로 구성될 수 있도록 형태를 정의하는 역할 수행
    - 유니코드 문자 : 텍스트 데이터 형식으로 유니코드를 사용해 전 세계 언어를 지원함
    - XML parser : 대다수의 웹 브라우저가 해석을 위한 번역기를 내장하고 있음
    - 마크업과 content : XML 문서의 문자들은 마크업과 내용으로 구분됨, 일반적으로 마크업은 “<“로 시작되며, “>”로 끝나는 태그를 의미함, 그 외의 문자열은 내용에 해당함
    - element : 마크업과 내용으로 이루어지는 하나의 요소를 의미함
- JSON
    - 속성-값 쌍으로 이루어진 데이터 객체를 전달하기 위해 사람이 읽을 수 있는 테스트를 사용하는 개방형 표준 포맷
    - 비동기 처리에 사용되는 AJAX에서 XML을 대체하여 사용됨
    - JSON이 가진 기본 자료형 : 
        - 숫자(정수와 실수를 표현함), 문자열(유니코드 문자로 표현하며 큰따옴표로 묶음), 참/거짓(True 혹은 False을 표현함), 
        - 배열(다양한 요소들을 쉼표로 구분하여 표현하며 대괄호로 묶음), 객체(아름/값 쌍으로 표현하며, 중괄호로 묶음), NULL(아직 알려지지 않거나 모르는 값을 표현하기 위한 자료형)
- AJAX: 클라이언트와 서버 간 자바스크립트 및 XML을 비동기 방식으로 처리하며, 전체 페이지를 새로 고치지 않고도 웹페이지 일부 영역만을 업데이트할 수 있도록 하는 기술
- 인터넷: TCP/IP 프로토콜을 기반으로 하여 전 세계 수많은 컴퓨터와 네트워크들이 연결된 광범위한 컴퓨터 통신망
- HTTP: 월드 와이드 웹(WWW)에서 HTML 문서를 송수신 하기 위한 표준 프로토콜로, 
- Hytertext
- HTML



# 6. 화면 설계
- UI : 사용자와 시스템 간의 상호작용이 원할하게 이뤄지도록 도와주는 장치나 소프트웨어
- UX : 사용자가 시스템이나 서비스를 이용하면서 느끼고 생각하게 되는 총체적인 감정 및 경험
- UI 설계 원칙
    - 직관성 : 누구나 쉽게 이해하고 사용할 수 있어야 함
    - 유효성 : 사용자의 목적을 정확하고 완벽하게 달성해야 함
    - 학습성 : 누구나 쉽게 배우고 익힐 수 있어야 함
    - 유연성 : 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 함
-  NUI : 사용자의 자연스러운 움직임을 통해 시스템과 상호작용하는 사용자 인터페이스(UI), 키보드나 마우스와 같이 조작을 배워야 하는 인공 제어 장치를 사용하는 인터페이스와 구분하기 위해 자연스러운이라는 표현 사용 ex. 시리, 빅스비 등과 같은 음성 비서에게 사용하는 자연어 명령이나 휴대폰이나 태블릿에서의 터치 등
- GUI : Windows, MacOS 등에서 사용하는 인터페이스로, 사용자가 명령어를 직접 입력하지 않고 키보드오 마우스 등을 이용해 아이콘이나 메뉴를 선택하여 모든 작업을 수행하는 사용자 인터페이스
- UML
    - 뜻 : 시스템 분석, 설계, 구현 등 시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원할하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어
    - 구성요소: 사물, 관계, 다이어그램
    - 사물
        - 클래스 : UML에 표현되는 사물의 하나, 객체가 갖는 속성과 동작을 표현함, 일반적으로 직사각형으로 표현하며 직사각형 안에 이름, 속성, 동작을 표기함
        - 인터페이스 : 클래스와 같은 UML에 표현되는 사물의 하나, 클래스나 컴포넌트의 동작을 모아 놓은 것이며 외부적으로 가시화되는 행동을 표현함, 단독으로 사용되는 경우는 없으며 인터페이스 구현을 위한 클래스 또는 컴포넌트와 함께 사용됨 
    - 관계 : 사물과 사물 사이의 연관성을 표현하는 것, 연관, 집합,포함,일반화 등 다양한 형태의 관계가 존재
        - Aggregation(집합) : 하나의 사물이 다른 사물에 포함되어 있는 관계, 전체와 부분으로 구분되어지며 서로 독립적 “독립”
            - Generalization(일반화) : 상위 모듈이 하위 모듈보다 더 일반적인 개념을 가지고 있으며, 하위 모듈이 상위 모듈보다 더 구체적인 개념을 가짐
    - 다이어그램
        -  클래스 다이어그램: UML(Unified Modeling Language) 다이어그램 중 객체들을 클래스로 추상화하여 표현하는 다이어그램, 구조적 다이어그램, 클래스는 각각의 객체들이 갖는 속성과 메소드를 표현한 것, 3개의 구획(이름,속성,메소드)으로 표기





# 7. 애플리케이션 테스트 관리
- 테스트 케이스의 구성요소: 테스트항목(로그인기능), 테스트조건(사용자 초기화면), 테스트 데이터(test_a01 / 123456789a), 예상결과(로그인성공)
- 살충제 패러독스 : 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 현상
-  소스코드 품질분석도구: 소스 코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 형상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구
    -  정적분석도구(Static Analysis - 정적 테스트): 작성한 소스 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함 등을 확인하는 코드 분석 도구
    -  동적분석도구(Dynamic Analysis - 동적 테스트): 소스코드를 직접 실행하여 프로그램의 동작이나 반응을 추적하고 보고하는 분석도구, 프로그램 모니터링 기능이나 스냅샷 생성 기능들을 포함함
-  블랙박스(=기능테스트) : 소프트웨어가 수행할 특정 기능을 알기 위해 각 기능이 완전히 작동되는 것을 입증하는 테스트
    - 동(Equivalence Partition): 입력조건이 유효한 경우와 그렇지 않은 경우의 입력 자료의 개수를 균등히 정하는 검사 기법
        - ‘평가점수표’를 미리 정해놓은 후 각 영역에 해당하는 입력값을 넣고 예상되는 출력값이 나오는지 실제값과 비교하는 명세 기반 테스트 기법
    - 경(Boundary Value Analysis) : 입력 조건의 중간값보다 경계값에서 오류가 발생될 확율이 높다는 점을 이용한 기법
        - ‘평가 점수표’를 미리 정해 놓은 후 각 영역의 경계에 해당하는 입력값을 넣고, 예상되는 출력값이 나오는지 실제 값과 비교하는 “명세 기반 테스트 기법”
        - ex) 0 <= x <= 10
            - 경계값 분석 : -1, 0, 10, 11 (입력값)
            - 동치 분할 검사 : 0 이상 10 이하의 수 n개 & 0 미만 10 초과의 수 n개 (입력값)
    - 원(Cause-Effect Graph):  테스트 기법 중 그래프를 활용하여 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사하는 기법
    - 비(Comparison Test):
    - 오(Error Guess):
    - 상(State transition Test):
    - 페(Pairwise Test):
    - 결(Decision Table Test):
    - 유(Usecase Test):
    - 분(분류 트리 테스트):
- 화이트박스(=구조적 테스트) : 모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적인 모든 경로를 테스트하여  테스트 케이스를 설계하는 방법
    - 기초 경로 검사(Base Path Test) /
    - 조건 검사(Condition Test) /
    - 루프 검사(Loop Test) /
    - 데이터 흐름 검사(Data Flow Testing) /
    - 구문 커버리지 (문장 - Statement)
        - 최소 한번은 모든 문장이 수행되도록 구성하는 검증 기준
    - 결정 커버리지 (분기 - Branch)
        - 소스코드의 모든 조건이 1번 이상 실행되도록 작성, 조건식이 참/거짓일 때 수행되도록 구성하는 검증 기준 : 1234567(Y/N) 124561(N/Y) or 1234561(Y/Y) 124567(N/N)
    - 조건(Condition) 커버리지
        - 결정 검증 기준과 달리 조건식에 상관 없이 개별 조건이 참/거짓일 때 수행되도록 구성하는 검증 기준
        - 프로그램 내에 있는 결정포인트 내의 모든 각 개별 조건식에 대한 모든 가능한 결과(참/거짓)에 대해 적어도 한번 수행
        - 소프트웨어 테스트 수행 시 소스코드를 어느 수준까지 수행하였는가를 나타내는 기준을 나타냄
        - 실제 업무에서는 다양한 툴을 사용해 테스트 수행
        - True/False에 충분한 영향을 줄 수 없는 경우가 발생 가능한 한계점
    - 조건/결정 커버리지 
        - 전체 조건식이 참/거짓 한번씩 수행하고, 개별 조건식이 참/거짓 한번씩 수행
    - 변형 조건/결정 커버리지
        - 개별 조건식이 다른 개별 조건식에 영향 받지 않고, 전체 조건식에 독립적으로 영향주도록 수행
    - 다중 조건 커버리지
        - 결정 조건 내 모든 개별 조건식의 모든 가능한 조합을 100% 보장
- V-모델
    - 요구사항 ( 요구사항 확인 - 인수 테스트) > 
        - 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 기법
        - 베타 테스트 : 선정된 최종 사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법, 실제 업무를 가지고 사용자가 직접 테스트함
        - 알파 테스트 : 개발자의 장소에서 사용자가 개발자 앞에서 행하는 테스트 기법, 테스트는 통제된 환경에서 행해지며, 오류와 사용 상의 문제점을 사용자와 개발자가 확인하면서 기록함
    - 분석 (기능 확인 - 시스템 테스트) > 
    - 설계 (인터페이스 확인 - 통합테스트) >
        - 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트, 모듈 간 또는 컴포넌트 간의 인터페이스가 정상적으로 실행 되는지 검사
    - 구현 (모듈 확인 - 단위 테스트) 
        - 코딩 직후 소프트웨어 설계읲 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 수행하는 테스트, “모듈 테스트”라고도 불림
        - 사용자의 요구사항을 기반으로 한 기능성 테스트를 최우선으로 인터페이스, 외부적I/O, 자료구조, 독립적 기초 경로, 오류 처리 경로, 경계 조건 등을 검사함
- Regression Test(회귀 테스트)
    - 통합 테스트로 인해 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트
    - 이미 테스트된 프로그램의 테스팅을 반복하는 것
    - 수정한 모듈이나 컴포넌트가 다른 부분에 영향을 미치는지, 오류가 생기지 않았는지 테스트하여 새로운 오류가 발생하지 않음을 보증하기 위해 반복 테스트함
- 통합테스트 : 단위 테스트가 끝난 모듈을 통합하는 과정에서 발생하는 오류 및 결함을 찾는 테스트 기법
    - 상향식 통합 테스트 : 하위 모듈에서 상위 모듈 방향으로 통합, 미완성이거나 문제가 있는 상위 모듈을 대체할 수 있는 테스트 드라이버 존재
    - 상향식 통합 테스트 : 소프트웨어의 하위 모듈에서 상위 모듈 방향으로 통합하는 테스트, 하나의 주요 제어 모듈 + 관련된 종속 모듈 그룹(클러스터) 필요, 데이터의 입출력을 확인하기 위해 더미 모듈인 테스트 드라이버 생성함
    - 하향식 통합 테스트 : 상위 모듈에서 하위 모듈 방향으로 통합, 미완성이거나 문제가 있는 하위 모듈을 대체할 수 있는 테스트 스텁 존재
- 오라클
    - 샘플링오라클 : 특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클, 전수테스트가 불가능한 경우, 경계값 및 구간별 예상값 결과 작성 시 사용
- 애플리케이션 성능 : 사용자가 요구한 기능을 초소한의 자원을 사용하여 최대한 많은 기능을 신속하게 처리하는 정도
- 애플리케이션 성능 측정 지표
    - 처리량 : 일정 시간 내에 애플리케이션이 처리하는 일의 양
    - 응답시간 : 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간
    - 경과시간 : 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간
    - 자원활용률 : 애플리케이션에 의뢰한 작업을 처리하는 동안의 CPU, 메모리, 네트워크 등의 자원 사용률



# 8. SQL 응용
- 키 : 데이터베이스에서 조직에 만족하는 튜플을 찾거나 순서대로 정렬할 때 기준이 되는 속성
    - 슈퍼키 : 한 릴렐이션 내에 있는 속성들의 집합으로 구성된 키로 릴레이션을 구성하는 모든 튜플에 “유일성”을 만족함
    - 후보키 : 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합으로 “유일성”과 “최소성”을 만족함
- DB 회복기법
    - 즉시갱신기법 (Immediate Update): 트랜잭션이 데이터를 변경하면 트랜잭션이 부분 완료되기 전이라도 즉시 실제 DB에 그 내용을 반영하는 기법으로, 장애가 발생하여 회복 작업할 경우를 대비하여 갱신된 내용들을 로그에 보관시킴. 즉시갱신기법에서 회복 작업을 수행할 경우 Redo 와 Undo 모두 수행 가능함
    - 지연갱신기법: 
- REDO : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트랜잭션의 시작(start)과 완료(commit)에 대한 기록이 있는 트랜잭션들의 작업을 재작업함. 즉, 로그를 이용해 해당 데이터 항목에 대해 이전 값을 이후 값으로 변경하는 연산
- UDDO : 데이터베이스가 비정상적으로 종료되었을 때, 디스크에 저장된 로그를 분석하여 트랜잭션의 시작을 나타내는 start는 있지만 완료를 나타내는 commit 기록이 없는 트랜잭션들이 작업한 내용들을 모두 취소함. 즉, 로그를 이용해 해당 데이터 항목에 대해 이후 값을 이전 값으로 변경함
- 이상 (Anomaly) : 데이터 중복으로 인해 테이블 조작 시 문제가 발생하는 현상
    - 식제이상(원치 않는 값 함께 삭제). 삽입이상(원치 않는 값 함께 삽입), 갱신이상(일부 튜플 정보만 갱신)
- 릴레이션 구성용어
    - 릴레이션 인스턴스 : 실제 값을 가진 튜플, 데이터 개체를 구성하고 있는 속성들에 데이터 타입이 정의되어 구체적인 데이터 값을 가진 것
    - 튜플 : 행, 릴레이션을 구성하는 각각의 행, 파일구조에서는 레코드에 해당
        - 카디널리티 - 튜플(행)의 갯수, 대응수 
    - 속성 : 열
        - 디그리 - 속성(열)의 갯수, 차수
- Grant : DCL(데이터 제어어) : DB 관리자가 DB 사용자에게 권한을 부여함
- ROLLBACK : 데이터 제어어, 트랜잭션 실패 시 작업취소 및 이전 상태로 복구하기 위한 명령어
- 파일의 구조 : 파일을 구성하는 레코드들이 보조기억장치에 편성하는 방식을 의미하는 것, 크게 순차,색인(indexing),해싱으로 구분함, 
    - 색인 파일 구조 : <값,주소> 쌍으로 구성되는 데이터 구조를 활용해 데이터에 접근함, 자기 디스크에서 주로 활용
- 트랜잭션 : 데이터베이스의 상태 변화
    - A(Atomicity)원자성 : 트랜잭션의 연산은 데이터베이스에 모두 반영되도록 완료(Commit)되든지 전혀 반영되지 않도록 복구(Rollback)되어야 함
    - C(Consistency)일관성 : 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성있는 데이터베이스 상태로 변환함
    - I(Isolation)독립성 : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행 중에 다른 트랜잭션의 연상이 끼어들 수 없음
    - D(Durability)지속성 : 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 함
- 로킹 제어 : 데이터베이스의 병행제어 기법 중 하나, 접근한 데이터에 대한 연산을 모두 마칠 때까지 추가적인 접근을 제한함으로써 상호 배타적으로 접근하여 작업을 수행할 수 있도록 하는 기법
- SELECT
    - SELECT name, score FROM 성적 ORDER BY score DESC;
    - SELECT COUNT(*) CNT FROM A CROSS JOIN B WHERE A.NAME LIKE B.RULE;
    - SELECT a.코드, 이름, 동아리명 FROM 사원 a LEFT JOIN 동아리 b ON a.코드 = b.코드;
    - SELECT * FROM 회원 WHERE 이름 LIKE ‘이%’ ORDER BY 가입일 DESC;
    - SELECT COUNT(*) FROM EMP_TBL WHERE EMPNO>100 AND SAL>=3000 OR EMPNO=200;
    - SELECT 학과, COUNT(*) AS 학과별튜플수 FROM 학생 GROUP BY ‘학과’;
    - SELECT 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수 FROM 성적 GROUP BY 과목이름 HAVING AVG(점수) >= 90;
    - SELECT DEPT FROM STUDENT;
    - SELECT DISTINCT DEPT FROM STUDENT;
    - SELECT COUNT(DISTINCT DEPT) FROM STUDENT WHERE DEPT = ‘전산과‘;
    - SELECT 학번, 이름 FROM 학생 WHERE 학년 IN(3,4);
    - SELECT 제품명, 단가, 제조사 FROM 제품 WHERE 단가 > ALL(SELECT 단가 FROM 제품 WHERE 제조사=‘H’);
        - ANY,SOME : 비교연산자 사용 가능 (~ 중에 하나 만족)
        - ALL : 비교연산자 사용 가능 (모두 다 만족)
    - SELECT COUNT(COL2) FROM TABLE WHERE COL1 IN(2,3) OR COL2 IN (3,5);
        - IN : 비교연산자 사용 불가능 (~ 중에 하나 만족)
        - 그룹함수: COUNT(), MAX(), MIN(), SUM(), AVG() 사용 시 NULL은 제외되어 계산됨
    - UPDATE 학부생 SET 학과번호=999 WHERE 입학생수 >= 300;
    - DELETE FROM 학생 WHERE 이름=‘민수’;
    - ALTER TABLE 학생 ADD 주소 VARCHAR(20);
    - CREATE INDEX idx_name ON student(name); //student 테이블의 name 속성에 idx_name 라는 인덱스 생성해줘
    - CREATE TABLE 부서 ( 부서코드 INT PRIMARY KEY, 부서명 VARCHAR(20));
    - CREATE TABLE 직원 ( 직원코드 INT PRIMARY KEY, 부서코드 INT, 직원명 VARCHAR(20), FOREIGN KEY(부서코드) REFERENCES 부서(부서코드) ON DELETE CACADE;
    - INSERT INTO 부서 VALUES(10,’영업부’);
    - INSERT INTO 부서 VALUES(20,’기획부’);
    - INSERT INTO 부서 VALUES(30,’개발부’);
    - INSERT INTO 직원 VALUES(1001, 10, ‘이진수’);
    - INSERT INTO 직원 VALUES(1002, 20, ‘곽연경’);
    - INSERT INTO 직원 VALUES(1003, 10, ‘김선길’);
    - INSERT INTO 직원 VALUES(1004, 10, ‘최민수’);
    - INSERT INTO 직원 VALUES(1005, 10, ‘이용길’);
    - INSERT INTO 직원 VALUES(1006, 10, ‘박종일’);
    - INSERT INTO 직원 VALUES(1007, 10, ‘박미경’);
        - COUNT() 함수에 대한 DISTINCT 이므로 무의미..
        - SELECT DISTINCT COUNT(부서코드) FROM 직원 WHERE 부서코드=20;   —3
        - DELETE FROM 부서 WHERE 부서코드=20;
        - SELECT DISTINCT COUNT(부서코드) FROM 직원;   —4
    - CREATE TABLE 학생 (학번 int, 이름 varchar(20), 학년 int, 전공 varchar(20), 전화번호 varchar(20));
    - INSERT INTO 학생(학번,이름, 학년, 전공, 전화번호) VALUES(9830287, ‘뉴진스’, 3, ‘경영학개론’, ‘010-1234-1234’);
- 하둡 (Hadoop)
    - 오픈 소스 기반 분산 컴퓨팅 플랫폼
    - 분산 저장된 데이터들은 클러스터 환경에서 병렬 처리됨
    - 일반 PC급 컴퓨터들로 가상화된 대형 스토리지를 형성하고 그 안에 보관된 거대한 데이터 세트를 병렬로 처리할 수 있도록 개발되었음
    - 구글의 맵리듀스 엔진 사용 중
- 데이터베이스의 스키마 : 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것
- 데이터마이닝: 대량의 데이터를 분석 후 데이터 내에 내재된 변수 사이의 관계를 규명해 일정한 패턴을 찾아내는 일







# 9. 소프트웨어 개발 보안 구축
- 암호화 알고리즘 : 패스워드, 주민번호, 은행계좌와 같은 중요 정보를 보호하기 위해 평문을 암호화된 문장으로 만드는 절차 또는 방법을 의미함
- DES : 1974년 IBM이 개발했고, 1975년 NBS에 의해 미국의 국가 표준으로 발표된 암호회 알고리즘, 블록크기는 64비트, 키 길이는 56비트, 16회의 라운드 수행, 컴퓨터 기술이 발달함에 따라 해독이 쉬워지면서 미국의 국가 표준이 2001년 AES로 대체됨
- AES : 2001년 미국 표준 기술 연구소(NIST)에서 발표한 대칭키 암호화 알고리즘, DES의 한계를 느낀 NIST에서 공모한 후 발표함, 블록 크기는 128비트, 키 길이에 따라 128,192,256으로 분류됨

- IDEA(Internatioal Data Encryption Alogrithm) : 스위스의 라이와 메시는 1990년 PES를 발표하고, 이후 이를 개선한 IPES를 발표함, IPESsms 128비트의 Key를 사용해 64비트 블록을 암호화하는 알고리즘이며 현재는 “IDEA” 라고 불림
- Skipjack : 국가 안전 보장국(NSA)에서 개발한 암호화 알고리즘으로, 클리퍼 칩이라는 IC 칩에 내장되어 있음. 80비트의 Key를 사용해 64비트 블록을 암호화하며, 주로 전화기와 같은 음성 통신 장비에 삽입되어 음성 데이터를 암호화함
- ISMS : “정보 보호 관리 체계” 정보 자산을 안전하게 보호하기 위한 보호 절차와 대책, 정보보호 관리 체계라고도 함, 조직에 맞는 정보보호 정책을 수립하고 위험에 상시 대응하는 여러 보안 대책을 통하 관리함, 공공 부문과 민간 기업 부문에서 이것을 평가하고 인증하는 사업을 한국인터넷진흥원(KISA)에서 운영 중
- MD5 : 1991년 R.rivest가 MD4를 개선한 암호화 알고리즘, 각각의 512 비트짜리 입력 메시지 블록에 대해 차례로 동작함, 각 512 비트 입력 메시지 블록을 처리하고 나면 128 비트 state 값이 변하는 암호화 알고리즘
- AAA서버: (Authentication : 접근하는 사용자의 신원 검증 - 인증) (Authorization : 신원이 검증된 사용자에게 특정된 권한과 서비스 허용 - 인가) (Accounting : 사용자가 어떤 종류의 서비스를 이용했고, 얼마만큼의 자원을 사용했는지 기록 및 보관)
- 데이터 베이스 보안
    - 기밀성 : 인증받은 사용자만 접근 가능
    - 무결성 : 인증받은 사용자만 수정 가능
    - 가용성 : 인가된 사용자는 언제든 접근 가능
    - 접근통제 : 데이터가 저장된 객체와 이를 사용하는 주체 사이의 정보 흐름을 제한하는 것
    - DAC(임의 접근 통제) : 접근통제에 관한 기술 중 하나, 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하여 제어하는 방식, “데이터의 소유자”가 접근통제 권한을 지정하고 제어함, 객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수 있음
- 목표복구시간 : 한국IT 보안관제실에서 근무, 서비스 운용 중 외부 공격으로 인한 서버다운, 자연재해, 시스템장애 등의 비상상황에도 고객 응대 서비스를 정상적으로 수행하기 위해 구축한 시스템을 관리함, 위처럼 비상 상황에 “비상사태 또는 업무중단 시점부터 업무가 복구되어 다시 정상 가동 될 때까지의 시간”을 의미
- SSO(Single Sign On) : 한 번의 로그인으로 개인이 가입한 모든 사이트를 이용할 수 있게 해주는 시스템
    - 개인의 경우 사이트에 접속하기 위해 아이디와 패스워드는 물론 이름, 전화번호 등 개인정보를 각 사이트마다 일일이 기록해야 하던 것이 한 번의 작업으로 끝나므로 불편함 해소
    - 기업의 경우 회원에 대한 통합관리가 가능해 마케팅을 극대화시킬 수 있음



# 10. 프로그래밍 언어 활용
- 헝가리안 표기법 : 변수명 작성 시 변수의 자료형을 알 수 있도록 자료형을 의미하는 문자를 포함하여 작성하는 방법
- C++ 생성자 : 객체 변수 생성에 사용되는 메소드로 객체 변수를 생성하면서 초기화를 수행함







# 11. 응용 SW 기초 기술 활용
- OSI 7layer : 다른 시스템 간의 원할한 통신을 위해 ISO(국제표준화기구)에서 제약한 통신규약(protocol)
    - 아(Application) 응용 계층 :
    - 파(Presentation) 표현 계층 : 서로 다른 데이터 표현 형태를 갖는 시스템 간의 상호 접속을 위해 필요한 계층, 코드변환, 데이터암호화, 데이터압축, 구문검색 등의 기능 수행
    - 서(Session) 세션 계층 :
    - 티(Transport) 전송 계층 : 
    - 나(Network) 네트워크(망) 계층 : 개방 시스템들 간의 네트워크 연결 관리, 경로제어, 패킷교환, 트래픽제어 등의 기능 수행
        - ICMP(Internet Control Message Protocol)
            - IP주요 구성원 중 하나
            - TCP/IP 기반의 인터넷 통신 서비스에서 인터넷 프로토콜(IP)과 조합하여 통신 중에 발생하는 오류의 처리와 전송 경로의 변경 등을 위한 제어 메시지를 취급하는 무연결 전송용 프로토콜
            - OSI 기본 참조 모델의 네트워크 계층에 속함
            - 관련된 도구로 traceroute, ping 이 있으며, ping of death 와 같은 네트워크 공격 기법에 활용됨
    - 다(Datalink) 데이터링크 계층 : 물리적으로 연결된 두 개의 인접한 개방 시스템들 간에 신뢰성 있고 효율적잉 정보 전송을 할 수 있도록 연결 설정, 데이터 전송, 오류 제어 등 기능 수행
        - L2TP(Layer 2 Tunneling Protocol)
            - 데이터링크 계층의 프로토콜 중 하나, 터널링 프로토콜인 PPTP와 VPN의 구현에 사용하는 L2F의 기술적 장점들을 결합하여 만든 프로토콜
            - 자체적으로 암호화 및 인증 기능을 제공하지 않아 다른 보안 프로토콜과 함께 사용되는 경우가 많음
    - 피(Physical) 물리 계층 : 다양한 전송 매체를 통해 비트스트림을 전송함, 전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의함


- HRN 비선점형 스케줄링의 우선순위 : (대기시간 + 서비스시간) / 서비스시간
- 스케줄링
    - SJF(Shortest Job First)
        - 준비상태 큐에서 기다리고 있는 프로세스들 중에서 실행 시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법
        - 가장 적은 평균 대기 시간을 제공하는 최적 알고리즘이지만, 실행 시간이 긴 프로세스는 실행 시간이 짧은 프로세스에게 할당 순위가 밀려 무한 연기 상태가 발생될 수 있음
    - RR(Round Robin)
        - 시분할 시스템을 위한 고안된 방식으로, 준비상태 큐에 먼저 들어온 프로세스가 먼저 CPU를 할당받지만 각 프로세스는 시간 할당량 동안만 실행한 후 실행이 완료되지 않으면 다음 프로세스에게 CPU를 넘겨주고 준비상태 큐의 가장 뒤로 배치됨
        - 할당되는 시간이 작을 경우 문맥 교환 및 오버헤드가 자주 발생되어 요청된 작업을 신속히 처리할 수 있음
    - SRT(Shortest Remaining Time)
        - 현재 실행중인 프로세스의 남은 시간과 준비상태 큐에 새로 도착한 프로세스의 실행 시간을 비교하여 가장 짧은 실행 시간을 요구하는 프로세스에게 CPU를 할당하는 기법으로, 시분할 시스템에 유용함
        - 준비상태 큐에 있는 각 프로세스의 실행 시간을 추적하여 보유하고 있어야 하므로 오버헤드가 증가함


-  RAID 기술 : 여러 개의 하드디스크로 배열을 구성하고. 파일을 구성하는 데이터 블록들을 서로 다른 디스크들에 분산 저장할 경우 그 블록들을 여러 디스크에서 동시에 읽고 쓸 수 있으므로 디스크의 속도가 매우 향상되는 기술
    -  Level 0 : RAID 방식 중 패리티가 없는 스트리핑된 2개 이상의 디스크를 병렬로 연결하여 구성하는 방식, 이 방식은 디스크 개수가 증가할수록 입출력 속도 및 저장 용령이 배로 증가하지만, 하나의 디스크만 손상되어도 전체 데이터가 유실되는 문제 발생함
- IPv6
    - 현재 사용하고 있는 IP 주소 체계인 IPv4의 주소 부족 문제를 해결하기 위해 개발됨
    - 16 비트씩 8부분, 총 128비트의 주소를 가짐
    - 각 부분을 16진수로 표현하고 콜론(:)으로 구분
    - 인증성, 기밀성, 데이터 무결성의 지원으로 보안 문제를 해결할 수 있음
    - 주소의 확장성, 융통성, 연동성이 뛰어남, 실시간 흐름 제어로 향상된 멀티미디어 기능을 지원함
- Ipv4
    - 32 비트의 주소를 가지며, 8 비트씩 4부분, 총 32 비트로 구성, 네트워크 부분의 길이에 따라 A클래스에서 E클래스까지 총 5단계로 구성
- 통신 방식
    - 가상회선 방식: 연결형 통신에서 주로 사용되는 방식, 출발지와 목적지의 전송 경로를 미리 연결하여 논리적으로 고정한 후 통신하는 방식
    - 데이터그램 방식: 비연결형 통신에서 주로 사용하는 방식, 사전에 접속 절차를 수행하지 않고 헤더에 출발지에서 목적지까지의 경로 지정을 위한 충분한 정보를 붙여서 개별적으로 전달하는 방식
- 프로토콜 
    - 심리학자 톰 마릴은 컴퓨터가 메시지를 전달하고, 메시지가 제대로 도착했는지 확인하며, 도착하지 않았을 경우 메시지를 재전송하는 일련의 방법을 ‘기술적 은어’를 뜻하는 프로토콜이라는 용어로 정의함
    - 서로 다른 기기들 간의 데이터 교환을 원할하게 수행할 수 있도록 표준화시켜놓은 표준 규약
    - 프로토콜의 기본 요소 3가지 : 구문, 의미, 시간
- TKIP(프로토콜) : 무선랜 보안에 사용된 웹 방식을 보완한 데이터 보안 프로토콜, 임시 키 무결성 프로토콜이라고도 부름, WEP의 취약성을 보완하기 위해 암호 알고리즘의 입력 키 길이를 128비트로 늘리고 패킷당 키 할당, 키값 재설정 등 키 관리 방식을 개선함
- RARP(프로토콜) : 인터넷 환경에서의 호스트 상호 간 통신에서 연결된 네트워트 접속 정치의 물리적 주소인 MAC 주소를 이용해 IP 주소를 찾는 인터넷 계층의 프로토콜로, 역순 주소 결정 프로토콜이라 불림

- 경로제어 프로토콜(Routing - 라우팅 프로토콜)
    - IGP : 자율 시스템 내분의 라우팅에 사용
        - RIP : 소규모 동종 자율 시스템에서 효율적
        - OSPF : 대규모 자유 시스템에서 많이 사용, 링크 상태(Link State)를 실시간으로 반영해 최단 경로로 라우팅을 지원함
        - OSPF(프로토콜)
        - RIP의 단점을 해결하여 새로운 기능을 지원하는 프로토콜
        - 인터넷 망에서 이용자가 최단 경로를 선정할 수 있도록 라우팅 정보에 노드 간에 거리 정보, 링크 상태 정보를 실시간으로 반영하여 최단 경로로 라우팅을 지원함
        - 대규모 네트워크에서 많이 사용됨
        - 최단 경로 탐색에 Dijkstra 알고리즘을 사용함
        - 라우팅 저보에 변화가 생실 경우 변화된 정보만 네트워크 내에 모든 라우터에 알림
        - 링크 스테이트 라우팅 알고리즘을 사용하며, 하나의 자율 시스템(AS)에서 동작하면서 라우팅 프로토콜의 그룹에 도달함
    - EGP : 자율 시스템 간의 라우팅에 사용
    - BGP(단점보완) : EGP의 단점을 보완하여 만들어진 라우팅 프로토콜, 처음 연결될 때는 전체 라우팅 테이블을 교환하고, 이후에는 변화된 정보만을 교환함

- VPN
    - 인터넷 등 통신 사업자의 공중 네트워크와 암호화 기술을 이용하여 사용자가 마치 자신의 전용 회선을 사용하는 것처럼 해주는 보안 솔루션
    - 암호화된 규격을 통해 인터넷망을 전용선의 사설망을 구축한 것처럼 이용하므로 비용 부담을 줄일 수 있음
    - VPN을 사용하면 두 장치 및 네트워크 사이에 암호화된 보안 터널이 생성됨
    - 터널에 사용되는 프로토콜에 따라 “SSL VPN”과 “IPsec VPN”으로 불림
- IPsec: 네트워크 트래픽에 대해 IP계층에서 IP 패킷 단위의 데이터 변조 방지 및 은닉 기능을 제공하는 네트워크 계층에서의 보안 통신규약
- SOAP(프로토콜 - Simple Object Access Protocol) : HTTP, HTTPS, SMTP 등을 사용하여 xml 기반의 메세지를 네트워크 상에서 교환하는 프로토콜로, SOAP envelope, 헤더(header), 바디(body) 등이 추가된 xml 문서, SOAP는 복잡하고 무거운 구조로 구성되어 있어 SOAP보다는 restful 프로토콜 이용함
- ARP 스푸핑 : 로컬 네트워크(LAN)에서 사용되는 “ARP” 프로토콜의 취약점을 이용한 공격 기법으로, 자신의 물리적 주소(MAC)를 변조하여 다른 PC에 도달해야 하는 데이터 패킷을 가로채거나 방해함
- NAT(Network Addresss Translation) 
    - 우리말로 번역하면 네트워크 주소 변환
    - 1개의 정식 IP 주소에 다량의 가상 사설 IP주소를 할당 및 연결하는 방식
    - 1개의 IP 주소를 사용해 외부에 접속할 수 있는 노드는 어느 시점에서 1개 만으로 제한되는 문제가 있으나, 이 때에는 IP 마스커레이드를 이용하면 됨
- 유닉스 : 1960년대 개발, 시분할 시스템을 위해 설계된 대화식 운영체제, 대부분 C언어로 작성되어 있어 이식성이 높으며 장치, 프로세스 간의 호환성이 높음, 트리 구조의 파일 시스템을 갖음
    - 리눅스 또는 유닉스에서 a.txt 파일에 대해 권한 부여 : rwx
        - 사용자에게 읽기,쓰기,실행 권한 부여, 그룹에게 읽기,실행 권한 부여, 기타 사용자에게 실행 권한 부여, 한 줄로 작성하고 8진법 숫자를 이용한 명령문 이용 : chmod 751 a.txt
- 안드로이드 : 리눅스 커널 위에서 동작하며, 자바와 코틀린으로 애플리케이션을 작성하는 운영체제, 휴대용 장치에서 주로 사용
- 프로세스 상태 전이도
    - 준비 , Ready : 
    - 실행 , Run : 
    - 대기,보류,블록, Wait,Block : 
- 소프트웨어 공학
    - 리팩토링의 목적 : 프로그램을 쉽게 이해하고 수정하여 빠르게 개발할 수 있도록 하기 위해
- SIEM(Social Information & Event Management) / ESM(Enterprise Security Management) :
    - 다양한 장비에서 발생하는 로그 및 보안 이벤트를 통합하여 관리하는 보안 솔루션
    - 방화벽, IDS, IPS, 웹 방화벽, VPN 등에서 발생한 로그 및 보안 이벤트를 통합하여 관리함으로써 비용 및 자원을 절약할 수 있음
    - 보안 솔루션 간의 상호 연동을 통해 종합적인 보안 관리 체계 수립 가능
- SSH(프로토콜)
    - 다른 컴퓨터에 로그인, 원격 명령 실행, 파일 복사 등을 수행할 수 있도록 다양한 기능을 지원하는 프로토콜 또는 이름 이용한 응용 프로그램
    - 데이터 암호화와 강력한 인증 방법으로 보안성이 낮은 네트워크에서도 안전하게 통신 가능
    - 키를 통한 인증 방법을 사용하려면 사전에 클라이언트의 공개키를 서버에 등록해야함
    - 기본적으로는 22번 포트를 사용

# 12. 제품 소프트웨어 패키징
- 소프트웨어 패키징 : 모듈 별로 생성한 실행 파일들을 묶어 배포용 설치파일을 만드는 과정
    - 소스코드는 향후 관리를 고려해 모듈화하여 패키징함
    - 모듈화 : 모듈 간 결합도의 최소화와 모듈 내 요소들의 응집도의 최대화 하는 것이 목표
- 릴리즈 노트
    - 개발 과정에서 정리된 릴리즈 정보를 소프트웨어의 최종 사용자인 고객과 공유하기 위한 문서
    - 릴리즈 노트는 정확하고 안전한 정보를 기반으로 개발팀에서 직접 현재 시제로 작성해야 함
    - 릴리즈 노트 작성 시 머릿말 : 릴리즈 노트 이름, 소프트웨어 이름, 릴리즈 버전, 릴리즈 날짜, 릴리즈 노트 날짜, 릴리즈 노트 버전 등이 포함





# 13. 용어
- 애드 혹 네트워크 : 재난 및 군사 현장과 같이 별도의 고정된 유선망을 구축할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크, 망을 구성한 후 단기간 사용되는 경우나 유선망을 구성하기 어려운 경우에 적합함, 멀티 홉 라우팅 기능을 지원함
- Watering Hole : 목표 조직이 자주 방문하는 웹 사이트를 사전에 감염시켜 목표 조직의 일원이 웹 사이트에 방문했을 때 악성 코드에 감염되게 함. 이후에는 감염된 PC를 기반으로 조직의 중요 시스템에 접근하거나 불능으로 만드는 등의 영향력을 행상하는 웹 기반 공격
- 세션 하이재킹 : ‘세션을 가로채다’의 의미로, 정상적인 연결을 RST 패킷을 통해 종료시킨 후 재연결 시 희생자가 아닌 공격자에게 연결하는 공격 기법
- TCP 세션 하이재킹 : 공격자가 TCP 3-Way-HandShake 과정에 끼어듦으로써 서버와 상호 간의 동기화된 시퀀스 번호를 갖고 인가되지 않은 시스템의 기능을 이용하거나 중요한 정보에 접근할 수 있게 됨
- 스니핑 : 네트워크 중간에 남의 패킷 정보를 몰래 도청하는 기법, 수동적 공격
- 블록체인 : P2P(피투피 Peer to Peer) 네트워크를 이용하여 온라인 금융 거래 정보를 온라인 네트워크 참여자의 디지털 장비에 분산 저장하는 기술
- LAND attack(Local Area Network Denial) : 공격자가 패킷의 출발지 주소 또는 포트를 임의로 변경하여 송신측 IP 주소 또는 포트를 동일하게 함으로써 송신 IP 주소가 자신이므로 자신에게 응답을 수행하게 됨. 이처럼 자신에 대해 무한히 응답하는 패킷을 계속 전송하여 컴퓨터의 실행 속도를 느리게 하거나 동작을 마비 시켜 서비스 거부 상태에 빠지도록 하는 네트워크 공격 (무한루프)
- SQL Injection : 웹 응용 프로그램에 SQL 구문을 삽입하여 내부 DB 서버의 데이터를 유출 및 변조하고 관리자 인증을 우회하는 공격 기법

- Trustzone: 칩 설계회사인 ARM에서 개발한 기술로, 하나의 프로세서 내에 일반 애플리케이션을 처리하는 일반 구역과 보안이 필요한 애플리케이션을 처리하는 보안 구역으로 분할하여 관리하는 하드웨어 기반의 보안기술
- Typosquatting: 네티즌들이 사이트에 접속할 때 주소를 잘못 입력하거나 철자를 빠뜨리는 실수를 이용하기 위해 유사한 도메인을 미리 등록하는 것으로, URL 하이재킹이라도 함, 유명 사이트들의 도메인을 입력할 떼 발생할 수 있는 온갖 도메인 이름을 미리 선점해 놓고 이용자가 모르는 사이에 광고 사이트로 이동하게 만듦

- 웜 : 윈도우나 응용 프로그램의 취약점 또는 E-mail 등을 통해 전파되며, 바이러스와 같이 자기복제가 가능하며 네트워크를 통해 스스로 전파 가능
- 트로이목마 : 정상적인 응용 프로그램에 포함되어 실행되는 악성코드로, 정상적인 응용 프로그램으로 위장하고 있다가 활성화되면 공격자는 이를 이용해 사용자의 컴퓨터를 조종할 수 있게 됨
- 바이러스 : 정상 파일을 감염시키며 자기복제 가능, 파일을 통해 감염되며 네트워크를 통해 스스로 전파되지는 못함

- 신기술
	- 사회공학(Social Engineering) : 컴퓨터 보안에 있어서, 인간 상호 작용의 깊은 신뢰를 바탕으로 사람들을 속여 정상 보안 절차를 깨트리기 위한 비기술적 시스템 침입 수단을 의미
	- 다크데이터(Dard : 특정 목적을 가지고 데이터를 수집하였으나, 이후 활용되지 않고 저장만 되어있는 대량의 데이터를 의미, 미래에 사용될 가능성을 고려하여 저장 공간에서 삭제되지 않고 보관되어 있으나, 이는 저장 공간의 낭비뿐만 아니라 보안 위험을 초래할 수 있음









